const fs = require('fs').promises;
const { spawn } = require('child_process');
const path = require('path');

async function execShellCommand(command, args, cwd) {
  return new Promise((resolve, reject) => {
    const process = spawn(command, args, { cwd, shell: true });
    process.stdout.on('data', data => console.log(data.toString()));
    process.stderr.on('data', data => console.error(data.toString()));
    process.on('close', (code) => {
      if (code === 0) {
        resolve();
      } else {
        reject(new Error(${command} exited with code ${code}));
      }
    });
  });
}

async function updateFiles(repoPath, changes) {
  for (const change of changes) {
    const filePath = path.join(repoPath, change.file);
    let fileContent = await fs.readFile(filePath, 'utf8');
    // Perform your replacement here. This is an example:
    fileContent = fileContent.replace(change.regex, change.replacement);
    await fs.writeFile(filePath, fileContent);
  }
}

async function setupRepo(repoPath, branchName, defaultBranch, legacyDeps) {
  if (await exists(repoPath)) {
    console.log('Repository exists. Stashing and checking out branch...');
    await execShellCommand('git', ['stash'], repoPath);
    await execShellCommand('git', ['checkout', branchName], repoPath);
    await execShellCommand('git', ['pull', 'origin', defaultBranch], repoPath);
  } else {
    console.log('Repository does not exist.');
    // Clone the repo or throw an error based on your flow
  }

  console.log('Updating files...');
  const changes = [
    { file: 'file1.js', regex: /oldFunction\(/g, replacement: 'newFunction(' },
    // Add more changes as needed
  ];
  await updateFiles(repoPath, changes);

  console.log('Running npm install...');
  const npmInstallArgs = legacyDeps ? ['install', '--legacy-peer-deps'] : ['install'];
  await execShellCommand('npm', npmInstallArgs, repoPath);

  console.log('Starting application...');
  await execShellCommand('npm', ['start'], repoPath);
}

async function exists(directory) {
  try {
    await fs.access(directory);
    return true;
  } catch {
    return false;
  }
}

// Usage example:
setupRepo('/path/to/repo', 'feature-branch', 'master', true);
